start: (set_expr SEMICOLON? | blendsql_aggregation_expr) -> final

set_expr: query_expr
        | set_expr "UNION"i ["DISTINCT"i] set_expr -> union_distinct
        | set_expr "UNION"i "ALL"i set_expr -> union_all
        | set_expr "INTERSECT"i ["DISTINCT"i] set_expr -> intersect_distinct
        | set_expr "EXCEPT"i ["DISTINCT"i] set_expr -> except_distinct
        | set_expr "EXCEPT"i "ALL"i set_expr -> except_all
        | set_expr "MATCH"i set_expr -> fts5_match

?expression_product: expression_parens
                  | expression_product "*" expression_parens -> expression_mul
                  | expression_product "/" expression_parens -> expression_div
                  | expression_product "+" expression_parens -> expression_add
                  | expression_product "-" expression_parens -> expression_sub
                  | expression_product "||" expression_parens -> expression_concat

?expression_parens: expression
                  | "(" expression_parens "*" expression ")" -> expression_mul
                  | "(" expression_parens "/" expression ")" -> expression_div
                  | "(" expression_parens "+" expression ")" -> expression_add
                  | "(" expression_parens "-" expression ")" -> expression_sub
                  | "(" expression_product "||" expression_parens ")" -> expression_concat

?expression: [name "."] (name | STAR) -> column_name
            | literal

query_expr: select [ "ORDER"i "BY"i (order_by_expr ",")*  order_by_expr] [ "LIMIT"i limit_count [ "OFFSET"i skip_rows ] ]

select: [cte_expr] "SELECT"i [SELECT_CONSTRAINT] [(select_expr ",")*] select_expr "FROM"i [(from_expr ",")*] from_expr [ "WHERE"i where_expr ] [ "GROUP"i "BY"i [(groupby_expr ",")*] groupby_expr ] [ "HAVING"i having_expr] [ "WINDOW"i window_expr ]

cte_expr: "WITH"i ["RECURSIVE"i] name "AS"i "(" set_expr ")" ("," name "AS"i "(" set_expr ")")*

where_expr: bool_expression

select_expr: expression_math [ [ "AS"i ] alias ] -> select_expression

?from_expr: from_item -> from_expression
from_item: name [ [ "AS"i ] alias ] -> table
            | join -> join
            | cross_join -> cross_join_expression
            | blendsql_join -> blendsql_join
            | subquery

order_by_expr: order -> order_by_expression
order: expression_math ["ASC"i] -> order_asc
            | expression_math "DESC"i -> order_desc

having_expr: bool_expression

groupby_expr: expression -> group_by

window_expr: [window_expr ","] _window_name "AS"i ( window_definition )

// TODO: can a subquery be a whole new `start` node?
subquery: ( "(" set_expr ")" ) [ [ "AS"i ] alias ]

cross_join: from_item "CROSS"i "JOIN"i from_item
blendsql_join: from_item "JOIN"i blendsql_join_expr
join: from_item [ JOIN_TYPE ] "JOIN"i from_item [ "ON"i bool_expression ] -> join_expression
JOIN_TYPE: "INNER"i | "FULL"i ["OUTER"i] | "LEFT"i["OUTER"i] | "RIGHT"i ["OUTER"i]

?expression_math: expression_product
               | expression_math "+" expression_product -> expression_add
               | expression_math "-" expression_product -> expression_sub
               | "CASE"i (when_then)+ "ELSE"i expression_math "END"i -> case_expression
               | "CAST"i "(" expression_math "AS"i TYPENAME ")" -> as_type
               | "CAST"i "(" literal "AS"i TYPENAME ")" -> literal_cast
               | AGGREGATE_FUNCTIONS expression_math ")" [window_form] -> sql_aggregation
               | SCALAR_FUNCTIONS [(expression_math ",")*] expression_math ")" -> sql_scalar
               | blendsql_aggregation_expr -> blendsql_aggregation
               | blendsql_scalar_expr -> blendsql_scalar
               | "RANK"i "(" ")" window_form -> rank_expression
               | "DENSE_RANK"i "(" ")" window_form -> dense_rank_expression
               | "|" "|" expression_math

BLENDSQL_AGGREGATE_FUNCTIONS: $blendsql_aggregate_functions
BLENDSQL_JOIN_FUNCTIONS: $blendsql_join_functions
BLENDSQL_SCALAR_FUNCTIONS: $blendsql_scalar_functions
left_on_arg: "left_on" "=" string
right_on_arg: "right_on" "=" string
blendsql_arg: (literal | "(" start ")")
blendsql_argnames: ("context"|"question"|"options")

blendsql_expression_math: [blendsql_argnames "="] blendsql_arg ("," [blendsql_argnames "="] blendsql_arg)*
blendsql_aggregation_expr: blendsql_function_begin BLENDSQL_AGGREGATE_FUNCTIONS blendsql_expression_math ")" blendsql_function_end
blendsql_scalar_expr: blendsql_function_begin BLENDSQL_SCALAR_FUNCTIONS blendsql_expression_math ")" blendsql_function_end
blendsql_join_expr: blendsql_function_begin BLENDSQL_JOIN_FUNCTIONS (left_on_arg "," right_on_arg|right_on_arg "," left_on_arg) ")" blendsql_function_end

window_form: "OVER"i "(" ["PARTITION"i "BY"i (expression_math ",")* expression_math] ["ORDER"i "BY"i (order ",")* order [ row_range_clause ] ] ")"

row_range_clause: ( ROWS | RANGE ) frame_extent
frame_extent: frame_between | frame_preceding
frame_between: "BETWEEN"i frame_bound "AND"i frame_bound
frame_bound: frame_preceding | frame_following | "CURRENT"i "ROW"i
frame_preceding: UNBOUNDED PRECEDING | integer_ PRECEDING
frame_following: UNBOUNDED FOLLOWING | integer_ FOLLOWING
RANGE: "RANGE"i
ROWS: "ROWS"i
UNBOUNDED: "UNBOUNDED"i
PRECEDING: "PRECEDING"i
FOLLOWING: "FOLLOWING"i

when_then: "WHEN"i bool_expression "THEN"i expression_math

column_name: [name "."] name


SELECT_CONSTRAINT.9: "ALL"i | "DISTINCT"i
TYPENAME:  "object"i
         | "varchar"i
         | "integer"i
         | "int16"i
         | "smallint"i
         | "int32"i
         | "int64"i
         | "int"i
         | "bigint"i
         | "float16"i
         | "float32"i
         | "float64"i
         | "float"i
         | "bool"i
         | "datetime64"i
         | "timestamp"i
         | "time"i
         | "date"i
         | "category"i
         | "string"i

// https://www.sqlite.org/lang_expr.html#*funcinexpr
AGGREGATE_FUNCTIONS: ("sum("i | "avg("i | "min("i | "max("i | "count("i ["distinct"i] )
SCALAR_FUNCTIONS: ("trim("i | "coalesce("i | "abs("i)

alias: string -> alias_string
_window_name: name
limit_count: integer_ -> limit_count
skip_rows: integer_
bool_expression: bool_parentheses
                 | bool_expression "AND"i bool_parentheses -> bool_and
                 | bool_expression "OR"i bool_parentheses -> bool_or
bool_parentheses: comparison_type
                 | "(" bool_expression "AND"i comparison_type ")" -> bool_and
                 | "(" bool_expression "OR"i comparison_type ")" -> bool_or
comparison_type: equals | not_equals | greater_than | less_than | greater_than_or_equal | like_expr
| less_than_or_equal | between | in_expr | not_in_expr | subquery_in | is_null | is_not_null | empty_expr
equals: expression_math "=" expression_math
is_null: expression_math "is"i "null"i
is_not_null: expression_math "is"i "not"i "null"i
not_equals: expression_math ("<>" | "!=") expression_math
greater_than: expression_math ">" expression_math
less_than: expression_math "<" expression_math
greater_than_or_equal: expression_math ">=" expression_math
less_than_or_equal: expression_math "<=" expression_math
between: expression_math "BETWEEN"i expression_math "AND"i expression_math
in_expr: expression_math "IN"i "(" [expression_math ","]* expression_math ")"
subquery_in: expression_math "IN"i subquery
not_in_expr: expression_math "NOT"i "IN"i "(" (expression_math ",")* expression_math ")"
like_expr: expression_math ["NOT"i]  ("LIKE"i | "GLOB"i | "REGEXP"i | "MATCH"i) expression_math
empty_expr: expression_math

string: /'([^']|\s)+'|''/
       | ESCAPED_STRING
       | name
?literal: boolean -> bool
       | number_expr -> number
       | string
       | timestamp_expression -> timestamp_expression
boolean: "true"i -> true
       | "false"i -> false
?number_expr: product

?product: NUMBER

integer_: /[1-9][0-9]*/
STAR: "*"
window_definition:
timestamp_expression: "NOW"i "(" ")" -> datetime_now
                    | "TODAY"i "(" ")" -> date_today
                    | "TIMESTAMP"i "(" "'" date "'" "," "'" time "'" ")" -> custom_timestamp

date: YEAR "-" MONTH "-" DAY
YEAR: /[0-9]{4}/
MONTH: /[0-9]{2}/
DAY: /[0-9]{2}/
time: HOURS ":" MINUTES ":" SECONDS
HOURS: /[0-9]{2}/
MINUTES: /[0-9]{2}/
SECONDS: /[0-9]{2}/
name: CNAME | ESCAPED_STRING | | /`([^`]|\s)+`|``/
SEMICOLON: ";"
CURLY_BRACKET_OPEN: "{"
CURLY_BRACKET_CLOSE: "}"
blendsql_function_begin: CURLY_BRACKET_OPEN ~ 2
blendsql_function_end: CURLY_BRACKET_CLOSE ~ 2

%import common.ESCAPED_STRING
%import common.CNAME
%import common.NUMBER
%import common.WS
%ignore WS
